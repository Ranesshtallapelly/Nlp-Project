# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d5jlFn1YR_tTuNNKUBV-zNOO0SikpAqm
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the dataset (assuming you have already uploaded it)
# If you uploaded the dataset, use the path as follows:
dataset_path = "combined_ai_human_dataset.csv"  # Update this path if necessary
df = pd.read_csv(dataset_path)

# Step 2: Preprocessing (Vectorizing the text data)
# Split the data into train and test sets
X = df['Text']
y = df['Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Convert text to numerical format using TF-IDF Vectorizer
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Step 3: Model Training
# Using Naive Bayes classifier for text classification
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Step 4: Model Evaluation
# Predicting the test set results
y_pred = model.predict(X_test_tfidf)

# Calculate accuracy score
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy*100:.2f}%")

# Confusion matrix and classification report
cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
print(f"Confusion Matrix:\n{cm}")
print(f"Classification Report:\n{classification_report(y_test, y_pred)}")

# Step 5: Visualize Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Step 6: Predicting New Text
def predict_text(text):
    text_tfidf = vectorizer.transform([text])
    prediction = model.predict(text_tfidf)
    return prediction[0]

# Example usage
new_text = "Yesterday I went to the temple with my family and felt very peaceful."
print(f"The text is: {new_text}")
print(f"Predicted label: {predict_text(new_text)}")